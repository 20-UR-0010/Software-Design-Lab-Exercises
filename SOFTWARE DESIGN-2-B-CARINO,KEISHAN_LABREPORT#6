#chat_client.py

from chat_gui import *
from chat_client_cli import *
import socket
import sys
import select

RECV_BUFR = 4096
USERS_CONNECTED = []
SOCKET = []
USERNAME = []
DEBUG = True
def connect_to_server(gui,SERVER_IP,SERVER_PORT,username):
    try:
        clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        clientsocket.connect((SERVER_IP, SERVER_PORT))
        clientsocket.send(bytes(username,'UTF-8'))
        clientsocket.settimeout(30)
        ack = clientsocket.recv(RECV_BUFR).decode()
        if ack != "NOT_UNIQUE":
            SOCKET.append(clientsocket)
            return [1,clientsocket]
        else:
            return [0,clientsocket]
    except(ConnectionRefusedError):
        gui.display("\nServer offline.\n",color='red')
        return [-1,0]
def recv_msg(gui,socket):
    data = socket.recv(RECV_BUFR)
    if not data :
        gui.disconnect()
    else:
        data = data.decode()
        gui.display("\n"+data)
        if "[*]" in data and "entered" in data and len(data.strip()) >= 1:
            gui.add_user(data.split(" ")[-2])
        if "[*]" in data and "exited" in data:
            gui.remove_user(data.split(" ")[-2])
def socket_handler(gui,socket):
    try:
        while 1:
            socket_list = [socket]
            read_sockets, write_sockets, error_sockets = \
            select.select(socket_list , [], [],)
            for sock in read_sockets:
                if sock == socket:
                    recv_msg(gui,sock)
    except(KeyboardInterrupt):
        print("Program terminated.")
        sys.exit()
    except:
        gui.display("\nDisconnected.\n",color="red")
def send_msg(server_socket,msg):
    server_socket.send(bytes(msg,'UTF-8'))
if __name__ == "__main__":
    if len(sys.argv) >= 2 and sys.argv[1] == "-c":
        cli_chat_client()
    else:
        root = Tk()
        gui_root = chat_gui(master=root)
        gui_root.mainloop()
        
#chat_client_cli.py
from datetime import datetime
from chat_gui import *
import socket
import sys
import select

SERVER_IP = '10.12.9.244'
SERVER_PORT = 3001
RECV_BUFR = 4096
USERS_CONNECTED = []
SOCKET = []
USERNAME = []
DEBUG = False
LINE = "\n*************************************\n"
def cli_chat_client():
    global SERVER_IP
    global SERVER_PORT
    global USERNAME
    SERVER_IP = input("SERVER IP >")
    SERVER_PORT = input("SERVER PORT >")
    USERNAME.append(input("USERNAME > "))
    if connect_to_server(USERNAME[0]) == 1:
        print(LINE+" Connected to "+SERVER_IP+LINE)
        data = SOCKET[0].recv(RECV_BUFR)
        users = data.decode().split('&')
        for user in users:
            USERS_CONNECTED.append(user)
        prompt()
        while 1:
            try:
                socket_list = [sys.stdin, SOCKET[0]]
                read_sockets, write_sockets, error_sockets = \
                select.select(socket_list , [], [],)
                for sock in read_sockets:
                    if sock == SOCKET[0]:
                        recv_msg(sock)
                    else:
                        send_msg(SOCKET[0],sys.stdin.readline())
            except(KeyboardInterrupt):
                print("Program terminated.")
                sys.exit()
            except:
                print("ERROR: Lost connection.")
                sys.exit()
def prompt():
    sys.stdout.write("["+datetime.now().strftime('%H:%M:%S')+"] "+ \
    USERNAME[0]+" > ")
    sys.stdout.flush()
def send_msg(server_socket,msg):
    server_socket.send(bytes(msg,'UTF-8'))
    prompt()
def recv_msg(socket):
    data = socket.recv(RECV_BUFR)
    if not data :
        print("Disconnected from the chat server.")
        sys.exit()
    else:
        data = data.decode()
        sys.stdout.write("\n"+data+"\n")
        if "[*]" in data and "entered" in data:
            debug(data.split(" ")[-2]+" added.")
            add_user(data.split(" ")[-2])
            print_all_users()
        if "[*]" in data and "exited" in data:
            debug(data.split(" ")[-2]+" removed.")
            remove_user(data.split(" ")[-2])
            print_all_users()
        prompt()
def connect_to_server(username):
    try:
        clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        clientsocket.connect((SERVER_IP, SERVER_PORT))
        clientsocket.send(bytes(username,'UTF-8'))
        clientsocket.settimeout(30)
        ack = clientsocket.recv(RECV_BUFR).decode()
        if ack != "NOT_UNIQUE":
            SOCKET.append(clientsocket)
            return 1
        else:
            print("Username already exist.")
            return 0
    except(ConnectionRefusedError):
        print("Server offline")
        return -1
def print_all_users():
    print("\nUSERS IN CHAT:")
    for user in USERS_CONNECTED:
        print("   "+user)
def debug(msg):
    if DEBUG:
        print("DEBUG: "+msg)
def add_user(username):
    # TODO: Write me
    USERS_CONNECTED.append(username)
def remove_user(username):
    # TODO: Write me
    USERS_CONNECTED.remove(username)
if __name__ == "__main__":
    cli_chat_client()

#chat_server.py
from datetime import datetime
import sys
import socket
from socket import *
import select

HOST = socket.gethostbyname(socket.gethostname())
SOCKET_LIST = []
RECV_BUFR = 4096
PORT = 3001
STAR = "[*] "
DEBUG = False
COMMANDS = ["HELP","KICK","LIST_USERS","EXIT"]
LINE = "\n***********************************************\n"
def chat_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((HOST, PORT))
    server_socket.listen(10)
    SOCKET_LIST['Host'] = server_socket
    print(LINE+"Chat running " +str(HOST)+":"+ str(PORT)+LINE)
    prompt()
    while 1:
        try:
            all_sockets = get_all_sockets()
            ready_to_read,ready_to_write,in_error = \
            select.select(all_sockets,[],[],0)
            for sock in ready_to_read:
                if sock == server_socket:
                    add_user(server_socket)
                elif sock == sys.stdin:
                    m = sys.stdin.readline().rstrip()
                    if m.split(" ")[0] in COMMANDS \
                    and len(m.split(" ")) <= 2:
                        process_command(m)
                    else:
                        send_msg_to_all(server_socket,server_socket,"server",
                        "server > "+m)
                else:
                    recv_msg(server_socket,sock)
        except(KeyboardInterrupt):
            print("Program terminated.")
            sys.exit()
def prompt():
    sys.stdout.write("["+datetime.now().strftime('%H:%M:%S')+"] "+"Host > ")
    sys.stdout.flush()
def recv_msg(server_socket, sock):
    try:
        data = sock.recv(RECV_BUFR).decode()
        username = get_username(sock)
        if data:
            msg = username+" > "+data.rstrip()
            print("\n"+"["+datetime.now().strftime('%H:%M:%S')+"] "+msg)
            send_msg_to_all(server_socket, sock, username, msg)
        else:
            remove_user(username)
    except(UnboundLocalError):
        print("ERROR: Attempted to send to user that doesnt exist.")
    except(ConnectionResetError,NameError, socket.timeout) as e:
        msg = STAR+username+" exited."
        print("\n"+msg)
        send_msg_to_all(server_socket, sock, username, msg)
def send_msg_to_all(server_socket, senders_socket,senders_username, message):
    debug("Entering send_msg_to_all")
    message = "["+datetime.now().strftime('%H:%M:%S')+"] "+message
    for username, socket in SOCKET_LIST.items():
        if socket != server_socket and socket != senders_socket:
            try:
                socket.send(bytes(message,'UTF-8'))
            except:
                socket.close()
                remove_user(username)
    prompt()
def add_user(server_socket):
    new_sock, new_addr = server_socket.accept()
    username = new_sock.recv(RECV_BUFR).decode().rstrip()
    new_sock.settimeout(30)
    if username not in SOCKET_LIST and username.strip() != "":
        SOCKET_LIST[username] = new_sock
        new_sock.send(bytes("OK",'UTF-8'))
        all_users = ''
        for user,socket in SOCKET_LIST.items():
            all_users += "&"+user
        new_sock.send(bytes(all_users,'UTF-8'))
        mesg = STAR+username+ " entered."
        print("\n"+mesg)
        print_all_users()
        send_msg_to_all(server_socket,new_sock,username,mesg)
    else:
        print(username+" "+str(new_addr)+" failed to connect.")
        new_sock.send(bytes("NOT_UNIQUE",'UTF-8'))
        new_sock.close()
        prompt()
def remove_user(username, kicked = False):
    try:
        SOCKET_LIST[username].close()
        del SOCKET_LIST[username]
        msg = STAR+username + " exited."
        print(msg)
        print_all_users()
        send_msg_to_all(SOCKET_LIST['Host'],SOCKET_LIST['Host'] ,\
        'Host', msg)
    except KeyError:
        pass
def get_username(socket):
    u = ''
    for username, sock in SOCKET_LIST.items():
        if socket == sock:
            u = username
    return u
def get_all_sockets():
    all_sockets = []
    all_sockets.append(sys.stdin)
    for username, socket in SOCKET_LIST.items():
        all_sockets.append(socket)
    return all_sockets
def print_all_users():
    all_users = "\nUSERS: ["
    for user, socket in SOCKET_LIST.items():
        all_users+= user+","
    print(all_users[:-1]+"]")
def process_command(cmd):
    try:
        if cmd.split(" ")[0] == COMMANDS[0]:
            print("Commands: ")
            for c in COMMANDS:
                print("   "+c)
            prompt()
        if cmd.split(" ")[0] == COMMANDS[1]:
            remove_user(cmd.split(" ")[1], kicked=True)
        if cmd.split(" ")[0] == COMMANDS[2]:
            print_all_users()
            prompt()
        if cmd.split(" ")[0] == COMMANDS[3]:
            sys.exit()
    except IndexError:
        pass
def debug(msg):
    if DEBUG:
        print(msg)
if __name__ == "__main__":
    chat_server()


#converttemp.py
from breezypythongui import EasyFrame

class TemperatureConverter(EasyFrame):

    def __init__(self):
        EasyFrame.__init__(self, title = "Temperature Converter")
        self.addLabel(text = "Celsius",
                      row = 0, column = 0)
        self.celsiusField = self.addFloatField(value = 0.0,
                                               row = 1,
                                               column = 0,
                                               precision = 2)


        self.addLabel(text = "Fahrenheit",
                      row = 0, column = 1)
        self.fahrField = self.addFloatField(value = 32.0,
                                            row = 1,
                                            column = 1,
                                            precision = 2)

        self.addButton(text = ">>>>",
                       row = 2, column = 0,
                       command = self.computeFahr)
        self.fahrField.bind("<Return>", lambda event: self.computeFahr())
        self.celsiusField.bind("<Return>", lambda event: self.computeCelsius())

        self.addButton(text = "<<<<",
                       row = 2, column = 1,
                       command = self.computeCelsius)
        self.fahrField.bind("<Return>", lambda event: self.computeFahr())
        self.celsiusField.bind("<Return>", lambda event: self.computeCelsius())

    def computeFahr(self):
        degrees = self.celsiusField.getNumber()
        degrees = degrees * 9 / 5 + 32
        self.fahrField.setNumber(degrees)

    def computeCelsius(self):
        degrees = self.fahrField.getNumber()
        degrees = (degrees - 32) * 5 / 9
        self.celsiusField.setNumber(degrees)

def main():
    TemperatureConverter().mainloop()

if __name__ == "__main__":
    main()



#doctor.py
import random
class Doctor():
 hedges = ("Please tell me more.","Many of my patients tell me the same thing.",
 "Please continue.")
 qualifiers = ("Why do you say that ",
 "You seem to think that ",
 "Can you explain why ")
 replacements = {"I":"you", "me":"you", "my":"your",
 "we":"you", "us":"you", "mine":"yours"}
 def __init__(self):
  self.history=[]
 def greeting(self):
  return "Good morning, I hope you are well today."
 def farewell(self):
  return "Have a nice day"
 def reply(self, sentence):
  choice = random.randint(1,10)
  if choice ==1:
   if len(self.history)>3:
    answer = "Earlier you said that " + \
         self.change_person(random.choice(self.history))
   else:
    answer= random.choice(Doctor.hedges)
  elif choice in (2,3,4,5):
    answer = random.choice(Doctor.qualifiers) +self.changePerson(sentence)
  else:
    answer= random.choice(Doctor.hedges)
    self.history.append(sentence)
  return answer

def changePerson(self, sentence):
 oldlist = sentence.split()
 newlist =[]
 for word in oldlist:
  if word in Doctor.replacements:
   newlist.append(Doctor.replacements[word])
  else:
   newlist.append(word)
 return "".join(newlist)




#doctorclient.py

from socket import *
from codecs import decode
from breezypythongui import EasyFrame
HOST = "localhost"
PORT = 5000
BUFSIZE = 1024
ADDRESS = (HOST, PORT)
CODE = "ascii"
class DoctorClient(EasyFrame):
 COLOR = "#CCEEFF" # Light blue
 def __init__(self):
  EasyFrame.__init__(self, title = "Doctor",
  background = DoctorClient.COLOR)
  self.drLabel = self.addLabel("Want to connect?",
  row = 0, column = 0,
  columnspan = 2,
  background = DoctorClient.COLOR)
  self.ptField = self.addTextField(text = "",row = 1,column = 0,columnspan = 2,width = 50)
  self.sendBtn = self.addButton(row = 2, column = 0,
 text = "Send",
command = self.sendReply,
state = "disabled")
  self.connectBtn = self.addButton(row = 2,
 column = 1,
 text = "Connect",
 command = self.connect)
  self.ptField.bind("<Return>",lambda event: self.sendReply())
 def sendReply(self):
  ptInput = self.ptField.getText()
  if ptInput != "":
   self.server.send(bytes(ptInput, CODE))
   drReply = decode(self.server.recv(BUFSIZE),CODE)
  if not drReply:
   self.messageBox(message="Doctor disconnected")
   self.disconnect()
  else:
   self.drLabel["text"] = drReply
   self.ptField.setText("")
 def connect(self):
   ptInput = self.ptField.getText()
   self.server = socket(AF_INET, SOCK_STREAM)
   self.server.connect(ADDRESS)
   self.server.send(bytes(ptInput, CODE))
   self.drLabel["text"] = decode(self.server.recv(BUFSIZE),CODE)
   self.connectBtn["text"] = "Disconnect"
   self.connectBtn["command"] = self.disconnect
   self.sendBtn["state"] = "normal"
 def disconnect(self):
  self.server.close()
  self.ptField.setText("")
  self.drLabel["text"] = "Please enter your name: "
  self.connectBtn["text"] = "Connect"
  self.connectBtn["command"] = self.connect
  self.sendBtn["state"] = "disabled"
def main():
 DoctorClient().mainloop()
if __name__ == "__main__":
 main()



#doctorclienthandler.py
from codecs import decode
from threading import Thread
from doctor import Doctor
import  os.path
import pickle
BUFSIZE = 1024
CODE = "ascii"
class DoctorClientHandler(Thread):
    def __init__(self, client):
        Thread.__init__(self)
        self.client = client

    def run(self):
        self.filename = decode(self.client.recv(BUFSIZE), CODE)+ ".dat"
        if os.path.exists(self.filename):
            fileObj= open(self.filename, "rb")
            self.dr = pickle.load(fileObj)
        else:
            self.dr =Doctor()
        self.client.send(bytes(self.dr.greeting(),CODE))
        while True:
            message = decode(self.client.recv(BUFSIZE), CODE)
            if not message:
                print("Client Disconnected")
                self.client.close()
                fileObj= open(self.filename, "wb")
                pickle.dump(self.dr, fileObj)
                fileObj.close()
                break
            else:
                self.client.send(bytes(self.dr.reply(message), CODE))



#doctorserver.py
from socket import *
from doctorclienthandler import DoctorClientHandler

HOST ="localhost"
PORT = 5000
ADDRESS =(HOST, PORT)
server = socket(AF_INET, SOCK_STREAM)
server.bind(ADDRESS)
server.listen(5)
while True:
    print("Waiting for connection...")
    client, address = server.accept()
    print("..connected from: ", address)
    handler = DoctorClientHandler(client)
    handler.start()



#guessversion.py
import random
from breezypythongui import EasyFrame
class GuessingGame(EasyFrame):

 def __init__(self):
    EasyFrame.__init__(self, title = "Guessing Game")
    self.myNumber = random.randint(1, 100)
    self.count = 0
    greeting = "Guess a number between 1 and 100."
    self.hintLabel = self.addLabel(text = greeting,
 row = 0, column = 0,
 sticky = "NSEW",
 columnspan = 2)
    self.addLabel(text = "Your guess", row = 1, column = 0)
    self.guessField = self.addIntegerField(0, row = 1, column = 1)
    self.nextButton = self.addButton(text = "Next", row = 2,
 column = 0)
    self.newButton = self.addButton(text = "New game",
 row = 2, column = 1)
def nextGuess(self):
    self.count += 1
    guess = self.guessField.getNumber()
    if guess == self.myNumber:
        self.hintLabel["text"] = "You've guessed it in " + \
                             str(self.count) + " attempts!"
        self.nextButton["state"] = "disabled"
    elif guess < self.myNumber:
        self.hintLabel["text"] = "Sorry, too small!"
    else:
        self.hintLabel["text"] = "Sorry, too large!"
def newGame(self):
        self.myNumber = random.randint(1, 100)
        self.count = 0
        greeting = "Guess a number between 1 and 100."
        self.hintLabel["text"] = greeting
        self.guessField.setNumber(0)
        self.nextButton["state"] = "normal"
def main():
 GuessingGame().mainloop()
if __name__ == "__main__":
     main()
